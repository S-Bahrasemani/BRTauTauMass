#!/usr/bin/env python
import os 
import logging
import math

import shutil
 
# rootpy/ROOT imports
import rootpy
from rootpy.extern.argparse import ArgumentParser
from rootpy.plotting.style import set_style
from rootpy.plotting import Hist, Canvas, Graph

#from rootpy.plotting.core.style import Color, LineStyle, FillStyle, MarkerStyle
import ROOT


# local imports
from brtautau.samples import Higgs
from brtautau.samples.higgs import * 
from brtautau.categories.mva import *
from brtautau.plotting.reco_ploter import *
from brtautau.categories.common import H_Pt

# setup the logging
#log = logging.getLogger(os.path.basename(__file__))
 
set_style('ATLAS', shape='rect')

# iterate over the masses and plot the lineshape
#####################  SETTINGS  ####################

test_ntuples_path = NTUPLE_PATH + "/TestingBRT/HH/TID-"+args.train_id+"_" + str(args.train_level)+"_" + str(args.train_mode)+ "_tr/"

#cuts = Cut('hh==1') & Cut("resonance_pt > 100000")
cuts_pre = Category_Preselection.common_cuts
if args.channel == 'lephad' and args.test_level == 'reco' and args.test_mode =='VBF':
    cuts = Category_VBF.cuts_lh
if args.channel == 'lephad' and args.test_level =='reco' and args.test_mode =='gg':
    cuts = Category_Boosted.cuts_lh


if args.channel == 'hh' and args.test_level == 'reco' and args.test_mode =='VBF':
    cuts_vbf = Category_VBF.cuts #& cuts_pre
if args.channel == 'hh' and args.test_level =='reco' and args.test_mode =='gg':
    cuts_gg = Category_Boosted.cuts #& cuts_pre


if args.test_level == 'truth':
    Masses = Higgs.MASSES 
 
elif args.test_level =='reco':
    Masses = range(100, 155, 5)


Estimators_Hists={}
Estimators_Hists_Mean={}
Estimators_Hists_MeanError={}
Estimators_Hists_RMS={}
Estimators_Hists_RMSError={}
 
brt_means=[]
brt_mean_errors=[]
brt_rms=[]
brt_rms_error=[]


#cuts=cuts_pre


cuts = Cut("ditau_tau1_matched_isHadTau==1") & Cut("ditau_tau0_matched_isHadTau==1") & cuts_vbf
for mass in Masses:
    # instantiate a Higgs sample at a given mass
    higgs = Higgs(ntuple_path = test_ntuples_path, tree_name ='Tree', mass=mass,level = args.test_level,  mode=args.test_mode, suffix='_test')
    # Declare and fill the hist dict for the BRT, MMC, Coll mass
    brt_hist = {'brt_mass': Hist(30, 0, 250)}
    brt_hist = higgs.get_hist_array(brt_hist, cuts = cuts)

    # Declare the BRT mass histogram                                                 
    hist_BRT = brt_hist['brt_mass']
    hist_BRT.xaxis.title = 'BRT Mass [GeV]'
    # plot the lineshape
    c = Canvas()
    hist_BRT.SetFillStyle("/")
    hist_BRT.SetFillColor("green")
    hist_BRT.SetLineColor("blue")
    hist_BRT.Draw('HIST')
    

    leg = ROOT.TLegend(0.8, 0.7, 0.95, 0.9)
    leg.AddEntry(hist_BRT,"#events = %i" %hist_BRT.Integral(),"l")
    leg.AddEntry(hist_BRT,"Mean = {:.2f}".format(hist_BRT.GetMean()),"l")
    leg.AddEntry(hist_BRT,"RMS = {:.2f}".format(hist_BRT.GetRMS()),"l")
    leg.Draw()

    lat = ROOT.TLatex(
        c.GetLeftMargin() + 0.05,
        1 - c.GetTopMargin() - 0.05,
       'H#rightarrow#tau_{%s}#tau_{%s} @ %i GeV --#color[2]{TrainMode: %s} / #color[4]{TestMode:%s}'
       % (args.channel[0], args.channel[1],mass, args.train_mode, args.test_mode))
    lat.SetNDC(True)
    lat.SetTextSize(22)
    lat.Draw()
    c.SaveAs('./plots/' + str(args.channel)+'/'+str(args.test_level)+'/'
             +str(args.train_id)+'-lineshape_{0}_{1}_{2}_{3}_{4}.png'.format(mass,args.test_level, args.test_mode, args.channel, H_Pt))

    brt_means.append(hist_BRT.GetMean())
    brt_mean_errors.append(hist_BRT.GetMeanError())
    brt_rms.append(hist_BRT.GetRMS())
    brt_rms_error.append(hist_BRT.GetRMSError())
    
    if args.test_level == 'reco':
        brt_hist = {'brt_mass': Hist(30, 0, 250)} 
        brt_hist = higgs.get_hist_array(brt_hist, cuts=cuts)
        hist_BRT=brt_hist['brt_mass']

        mmc_hist = {'ditau_mmc_mlnu3p_m': Hist(30, 0, 250)} 
        mmc_hist = higgs.get_hist_array(mmc_hist, cuts=cuts)
        hist_MMC=mmc_hist['ditau_mmc_mlnu3p_m']

        mosaic_hist = {'ditau_mosaic_mH': Hist(30, 0, 250)}
        mosaic_hist = higgs.get_hist_array(mosaic_hist, cuts=cuts)
        hist_Mosaic = mosaic_hist['ditau_mosaic_mH']
        #log.info('--m(H) = %s: m(MMC) = %s , res = %s' % (mass, hist_MMC.GetMean(), hist_MMC.GetRMS()))
        Estimators_Hists[mass]= [hist_BRT, hist_MMC, hist_Mosaic]

        Estimators_Hists_Mean[mass]= [hist_BRT.GetMean(), hist_MMC.GetMean(), hist_Mosaic.GetMean()]
        Estimators_Hists_MeanError[mass]= [hist_BRT.GetMeanError(), hist_MMC.GetMeanError(), hist_Mosaic.GetMeanError()]
        
        Estimators_Hists_RMS[mass]= [hist_BRT.GetRMS(), hist_MMC.GetRMS(), hist_Mosaic.GetRMS()]
        Estimators_Hists_RMSError[mass]= [hist_BRT.GetRMSError(), hist_MMC.GetRMSError(), hist_Mosaic.GetRMSError()]
        

############# RECO PLOTS BLOCK #############

# ## Build the reco curves for mass estimators comparison:

draw_calib_curve(Estimators_Hists,Estimators_Hists_Mean, Estimators_Hists_MeanError, Estimators_Hists_RMS, 
                 Estimators_Hists_RMSError, masses=Masses, date=my_datetime, level=args.test_level,
                 mode=args.test_mode, channel= args.channel, train_id = args.train_id)
    
#### CREATING ROC CURVES: H(acceptance)- Z(rejection)

Zboson = Higgs(ntuple_path = test_ntuples_path, tree_name ='Tree', mode = 'Z', mass = 90, level = 'reco', suffix = '_test')

brt_hist = {'brt_mass': Hist(30, 0, 250)} 
brt_hist = Zboson.get_hist_array(brt_hist, cuts=cuts)
hist_BRT=brt_hist['brt_mass']


mmc_hist = {'ditau_mmc_mlnu3p_m': Hist(30, 0, 250)} 
mmc_hist = Zboson.get_hist_array(mmc_hist, cuts=cuts)
hist_MMC=mmc_hist['ditau_mmc_mlnu3p_m']

mosaic_hist = {'ditau_mosaic_mH': Hist(30, 0, 250)}
mosaic_hist = Zboson.get_hist_array(mosaic_hist, cuts=cuts)
hist_Mosaic = mosaic_hist['ditau_mosaic_mH']
      
Z_hists_temp=[hist_BRT, hist_MMC,hist_Mosaic]    
    
Z_hists_Nor = [Z_hists_temp[0].Clone("hist_BRT"), Z_hists_temp[1].Clone("hist_MMC"), Z_hists_temp[2].Clone("hist_Mosaic")]
[Z_hists_Nor[i].Scale(1./Z_hists_Nor[i].Integral()) for i in range(3)]
Z_hists = Z_hists_Nor

H125_hists_temp = Estimators_Hists[125]
H125_hists = [H125_hists_temp[0].Clone("hist_BRT"), H125_hists_temp[1].Clone("hist_MMC"), H125_hists_temp[2].Clone("hist_Mosaic")]
[H125_hists[i].Scale(1./H125_hists[i].Integral()) for i in range(3)]

### Higgs Normalized Hists
Estimators_Hists_Nor = {}
for mass in Masses:
    hist_temp = Estimators_Hists[mass]
    hist = [hist_temp[0].Clone("hist_BRT"), hist_temp[1].Clone("hist_MMC"), hist_temp[2].Clone("hist_Mosaic")]
    [hist[i].Scale(1./hist[i].Integral()) for i in range(3)]
    Estimators_Hists_Nor [mass]= hist

draw_mass_lineshapes(H_Hists = Estimators_Hists_Nor, Z_Hist = Z_hists , channel = args.channel, mode = args.test_mode, train_id = args.train_id, H_Pt = H_Pt)
draw_roc_curve(H1 = H125_hists, H2 = Z_hists, H1_tag = 'Z', H1_mass = '90', H2_tag= 'H', H2_mass = '125', channel = args.channel,
               mode = args.test_mode, train_id = args.train_id, H_Pt = H_Pt)
 
# ### Draw Higgs Roc Curves:
# for mass1 in range(100, 155, 5):
#     for mass2 in range (mass1 + 5, 155, 5):
#         H2 = Estimators_Hists_Nor[mass1]
#         H1 = Estimators_Hists_Nor[mass2]
#         draw_roc_curve(H1 = H1, H2= H2, H1_tag= 'H', H1_mass = str(mass1) ,H2_tag= 'H', H2_mass = str(mass2),  channel =args.channel, mode =args.test_mode,train_id = args.train_id)

