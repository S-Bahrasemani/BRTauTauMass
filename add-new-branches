#!/usr/bin/env python
import os
import shutil
import ROOT
import math 
import logging
from multiprocessing import Process
import array

## rootpy imports 
from rootpy.io import root_open
from rootpy.tree import TreeModel, FloatCol, IntCol
from rootpy.stl import vector

## local imports 
from brtautau import parallel 
from brtautau.parallel import run_pool
from brtautau.categories.features import FEATURES 

log = logging.getLogger('apply-bdt-weights')
  
class Model(TreeModel):
   #### 4Momentum  block   
   tau1_pt =FloatCol()
   
def deltaPhi(phi1,phi2):
    dPhi=abs(phi1-phi2)
    while dPhi>math.pi:
        dPhi=dPhi-2*math.pi
    return abs(dPhi)

def add_new_branches(tree):
   tree.create_buffer()
   tree.set_buffer(Model(), create_branches=True)
            
   tree.SetEntries(-1)
            

class Job(Process):
    def __init__(self, filename):
        super(Job, self).__init__()
        self.filename = filename

    def run(self):
        filename = self.filename
        path, name = os.path.split(filename)
        # copy to new file
        output = os.path.join(path, 'v1.' + name)
        if os.path.exists(output):
            return
        log.info("copying {0} to {1} ...".format(filename, output))
        shutil.copy(filename, output)
        with root_open(output, 'UPDATE') as file:
            tree = file.NOMINAL
            #if 'dPhi_tau1_tau2_MET' in tree:
             #      log.info("dphi_taus_met already exists in {0} ...".format(output))
              #     return
            #log.info("adding dphi_taus_met to {0} ...".format(output))
            add_new_branches(tree)
            tree.Write(tree.name, ROOT.TObject.kOverwrite)


if __name__ == '__main__':

    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()

    jobs = [Job(f) for f in args.files]
    run_pool(jobs, n_jobs=-1)

