#!/usr/bin/env python
import os
import logging
import re
import datetime
import rootpy
from rootpy.plotting.style import set_style
from rootpy.tree import Cut

from brtautau.variables import VARIABLES
from brtautau.samples import *

from brtautau.categories.truth import Category_Preselection_TH_LH, Category_Preselection_TH

from brtautau.categories.mva import *

from brtautau.plotting import draw_hists
from brtautau.plotting.compare import draw_ratio

log = logging.getLogger(os.path.basename(__file__))

set_style('ATLAS', shape='rect')


from argparse import ArgumentParser
parser = ArgumentParser()
parser.add_argument('--var', default=None, help='Specify a particular variable')
parser.add_argument('--logy', default=False, action='store_true')
parser.add_argument('--cut', default=None, type=str, help='additional cut to apply')
parser.add_argument('--mode', default='VBF', type=str, choices=['VBF', 'gg'])
parser.add_argument('--level', default='truth', type=str, choices=['reco', 'truth', 'mix'])
parser.add_argument('--channel', default='lephad', type=str, choices=['lephad', 'hadhad'])
parser.add_argument('--train_mode', default='VBF', type=str, choices=['VBF', 'gg'])

args = parser.parse_args()
date = datetime.date.today()
date = date.strftime("%m%d%y")

#####################  SETTINGS  ####################

NTUPLE_PATH = 'ntuples'

## Preselection and Category cuts:

# if args.channel == 'lephad' and args.level == 'reco':
#     if args.mode =='VBF':
#         cat = Category_Preselection_LH
#         cuts = Category_VBF.cuts_lh
#     if args.mode =='gg':
#         cat = Category_Preselection_LH

cuts_pre = Category_Preselection.cuts


if args.channel == 'hadhad' and args.level == 'reco':

    if args.mode =='VBF':
        cat = Category_VBF
        cuts = Category_VBF.cuts & cuts_pre
    if  args.mode =='gg':
        cat = Category_Boosted
        cuts= Category_Boosted.cuts & cuts_pre


if args.level =='truth' and args.channel =='hadhad':
    cat = Category_Preselection_TH
if args.level =='truth' and args.channel =='lephad':
    cat = Category_Preselection_TH_LH


if args.cut:
    cuts = Cut(args.cut)
    

#### comparison of reco and truth variabels

variables = VARIABLES
if args.var is not None:
    if args.var in VARIABLES:
        vars = {args.var: VARIABLES[args.var]}
    else:
        raise RuntimeError('Wrong key (see variables.py)')

cat_truth = Category_Preselection_TH()
cat_reco = Category_Preselection()

for mass in [100, 125, 150]:

    higgs_truth = Higgs(ntuple_path = NTUPLE_PATH + '/TrainingBRT', mass=mass, mode=args.train_mode, level = 'truth', suffix = '_train')
    higgs_reco = Higgs(ntuple_path = NTUPLE_PATH + '/TrainingBRT', mass=mass, mode=args.train_mode, level = 'reco', suffix = "_train" )
    field_hists = higgs_truth.get_field_hist(variables)
    hists_truth = higgs_truth.get_hist_array(field_hists, cat_truth)#, cuts=args.cut)
    hists_reco = higgs_reco.get_hist_array(field_hists, cat_reco, cuts=args.cut)

    for field, var_info in field_hists.items():
        h_truth = hists_truth[field]
        h_reco = hists_reco[field]
        Hists = [h_truth, h_reco]
        
        plot = draw_hists(Hists, field, cat_reco, logy=args.logy, unit_area=True)
        ratio_plot = draw_ratio(h_truth, h_reco, field, cat_reco)
        log.info(plot)

        if args.logy:
            plot.SaveAs(os.path.join('plots/variables', str(date)+'-lineshape_'+field+ '_'+str(mass)+
                                     '_'+cat_reco.name+'_logy_{0}_{1}_{2}.png'.format(args.level, args.train_mode, args.channel)))
        else: 
            plot.SaveAs(os.path.join('plots/variables', str(date)+'-lineshape_'+field+ '_' +str(mass)+
                                     '_'+cat_reco.name+'_{0}_{1}_{2}.png'.format(args.level, args.train_mode, args.channel)))

        if args.logy:
            ratio_plot.SaveAs(os.path.join('plots/variables', str(date)+'-ratio_lineshape_'+field+ '_'+str(mass)+
                                     '_'+cat_reco.name+'_logy_{0}_{1}_{2}.png'.format(args.level, args.train_mode, args.channel)))
        else: 
            ratio_plot.SaveAs(os.path.join('plots/variables', str(date)+'-ratio_lineshape_'+field+ '_' +str(mass)+
                                     '_'+cat_reco.name+'_{0}_{1}_{2}.png'.format(args.level, args.train_mode, args.channel)))

                               
## plots of BRT's input variables:



# vars_truth = VARIABLES_Truth
# vars_reco = VARIABLES_Reco


# higgs_80 = Higgs(ntuple_path = NTUPLE_PATH + "/TrainingBRT/Truth/HadHad/"  , mass=80, mode=args.mode, level = 'truth', treename='NOMINAL', suffix = '_train')
# higgs_100 = Higgs(ntuple_path = NTUPLE_PATH + "/TrainingBRT/Truth/HadHad/"  , mass=100, mode=args.mode, level = 'truth', treename='NOMINAL', suffix = '_train')
# higgs_125 = Higgs(ntuple_path = NTUPLE_PATH + "/TrainingBRT/Truth/HadHad/"  , mass=125, mode=args.mode, level = 'truth', treename='NOMINAL', suffix = '_train')
# higgs_150 = Higgs(ntuple_path = NTUPLE_PATH + "/TrainingBRT/Truth/HadHad"  , mass=150, mode=args.mode, level = 'truth', treename='NOMINAL', suffix = '_train')
# higgs_180 = Higgs(ntuple_path = NTUPLE_PATH + "/TrainingBRT/Truth/HadHad/"  , mass=180, mode=args.mode, level = 'truth', treename='NOMINAL', suffix = '_train')

# field_hists_truth = higgs_125.get_field_hist(variables)
# # cat_truth = Category_Preselection_TH()
# cat_pre = Category_Preselection()

# hists_80_truth = higgs_80.get_hist_array(field_hists_truth, cat_pre, args.cut)
# #hists_100_truth = higgs_100.get_hist_array(field_hists_truth, cat_pre, args.cut)
# hists_125_truth = higgs_125.get_hist_array(field_hists_truth, cat_pre, args.cut)
# hists_150_truth = higgs_150.get_hist_array(field_hists_truth, cat_pre, args.cut)
# hists_180_truth = higgs_180.get_hist_array(field_hists_truth, cat_pre, args.cut)


# for field, var_info in field_hists_truth.items():
#     print field + 30*" |*|*"
#     h_80 = hists_80_truth[field]
#  #   h_100 = hists_100_truth[field]
#     h_125 = hists_125_truth[field]
#     h_150 = hists_150_truth[field]
#     h_180 = hists_180_truth[field]
#     Hists = [h_80, h_125, h_150, h_180]

#     plot = draw_hists(Hists, field, cat_pre, logy=args.logy, unit_area=True)
#     log.info(plot)
#     if args.logy:
#         plot.SaveAs(os.path.join('plots/variables', str(date)+'-lineshape_'+field+'_'+cat_pre.name+'_logy_{0}_{1}_{2}.png'.format(args.level, args.TrainMode, args.channel)))
#     else: 
#         plot.SaveAs(os.path.join('plots/variables', str(date)+'-lineshape_'+field+'_'+cat_pre.name+'_{0}_{1}_{2}.png'.format(args.level, args.mode, args.channel)))
            


